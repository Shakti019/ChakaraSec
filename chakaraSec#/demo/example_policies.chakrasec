// ChakraSec Policy Examples
// Demonstrates various security policies for the 7-layer Chakravyuh protection

// High-Security Financial Asset
asset "financial_vault" {
    layers = 7;
    
    // Layer 7 (Outermost) - Basic filtering
    layer 7 {
        policy = RATE_LIMIT(5, 60) && TIME_WINDOW("09:00", "17:00");
        action_on_fail = ALERT("security_team");
    }
    
    // Layer 6 - Geolocation and device verification
    layer 6 {
        policy = GEO(40.7128, -74.0060, 1000) && DEVICE("device_pubkey_123");
        action_on_fail = RETURN_DECOY("financial");
    }
    
    // Layer 5 - Dynamic puzzle (changes every second)
    layer 5 {
        policy = PUZZLE("matrix", 128);
        action_on_fail = RETURN_DECOY("financial");
    }
    
    // Layer 4 - Multi-factor authentication
    layer 4 {
        policy = MFA(2) && RISK_LEQ(0.3);
        action_on_fail = ALERT("fraud_team");
    }
    
    // Layer 3 - Custodian threshold (3 of 5 custodians)
    layer 3 {
        policy = THRESHOLD(3, ["custodian_alice", "custodian_bob", "custodian_charlie", "custodian_david", "custodian_eve"]);
        action_on_fail = DENY();
    }
    
    // Layer 2 - HSM verification
    layer 2 {
        policy = HSM_UNSEAL("financial_master_key") && MFA(3);
        action_on_fail = DENY();
    }
    
    // Layer 1 (Innermost) - Final verification
    layer 1 {
        policy = MFA(3) && DEVICE("secure_device_key") && TIME_WINDOW("10:00", "16:00");
        action_on_fail = DENY();
    }
    
    metadata {
        "classification": "TOP_SECRET";
        "owner": "financial_department";
        "created": "2024-01-01";
    }
}

// Medical Records Asset
asset "patient_records" {
    layers = 7;
    
    layer 7 {
        policy = RATE_LIMIT(10, 300) && GEO(34.0522, -118.2437, 5000);
        action_on_fail = ALERT("compliance_team");
    }
    
    layer 6 {
        policy = DEVICE("medical_device_key") && TIME_WINDOW("06:00", "22:00");
        action_on_fail = RETURN_DECOY("medical");
    }
    
    layer 5 {
        policy = PUZZLE("matrix", 64);
        action_on_fail = RETURN_DECOY("medical");
    }
    
    layer 4 {
        policy = MFA(2) && RISK_LEQ(0.2);
        action_on_fail = ALERT("security_team");
    }
    
    layer 3 {
        policy = THRESHOLD(2, ["doctor_smith", "nurse_johnson", "admin_wilson"]);
        action_on_fail = DENY();
    }
    
    layer 2 {
        policy = HSM_UNSEAL("medical_records_key") && MFA(2);
        action_on_fail = DENY();
    }
    
    layer 1 {
        policy = MFA(2) && DEVICE("medical_terminal_key");
        action_on_fail = DENY();
    }
    
    metadata {
        "classification": "CONFIDENTIAL";
        "compliance": "HIPAA";
        "retention": "7_years";
    }
}

// Corporate Secrets Asset
asset "trade_secrets" {
    layers = 7;
    
    layer 7 {
        policy = RATE_LIMIT(3, 3600) && GEO(37.7749, -122.4194, 500);
        action_on_fail = ALERT("legal_team");
    }
    
    layer 6 {
        policy = DEVICE("corporate_device") && TIME_WINDOW("08:00", "18:00");
        action_on_fail = RETURN_DECOY("corporate");
    }
    
    layer 5 {
        policy = PUZZLE("matrix", 256);
        action_on_fail = RETURN_DECOY("corporate");
    }
    
    layer 4 {
        policy = MFA(3) && RISK_LEQ(0.1);
        action_on_fail = ALERT("ciso");
    }
    
    layer 3 {
        policy = THRESHOLD(4, ["ceo", "cto", "legal_counsel", "security_officer", "board_member"]);
        action_on_fail = DENY();
    }
    
    layer 2 {
        policy = HSM_UNSEAL("corporate_master") && MFA(3);
        action_on_fail = DENY();
    }
    
    layer 1 {
        policy = MFA(3) && DEVICE("executive_device") && GEO(37.7749, -122.4194, 100);
        action_on_fail = DENY();
    }
    
    metadata {
        "classification": "TRADE_SECRET";
        "owner": "executive_team";
        "expiry": "2030-12-31";
    }
}

// Development Environment (Lower Security)
asset "dev_environment" {
    layers = 7;
    
    layer 7 {
        policy = RATE_LIMIT(50, 60);
        action_on_fail = ALERT("dev_team");
    }
    
    layer 6 {
        policy = DEVICE("dev_machine_key");
        action_on_fail = RETURN_DECOY("technical");
    }
    
    layer 5 {
        policy = PUZZLE("matrix", 32);
        action_on_fail = RETURN_DECOY("technical");
    }
    
    layer 4 {
        policy = MFA(1);
        action_on_fail = DENY();
    }
    
    layer 3 {
        policy = RISK_LEQ(0.7);
        action_on_fail = DENY();
    }
    
    layer 2 {
        policy = MFA(1) && TIME_WINDOW("00:00", "23:59");
        action_on_fail = DENY();
    }
    
    layer 1 {
        policy = DEVICE("dev_machine_key");
        action_on_fail = DENY();
    }
    
    metadata {
        "classification": "INTERNAL";
        "environment": "development";
        "auto_expire": true;
    }
}


